package pack01.list;

import java.util.ArrayList;
import java.util.List;

public class Ex04_ArrayList {
	public static void main(String[] args) {
		// 사용빈도가 높음. 배열의 단점을 보완하고 불필요한 체이닝, 멀티쓰레딩 등의 기능이 없기 때문에 제일 많이 사용됨.
		// List<E> list = new ArrayList<E>();
		// ArrayList<E> list = new ArrayList<E>();

		ArrayList<String> list1 = new ArrayList<>(); // 뒤에는 타입 생략 가능
		list1.add("java1");
		list1.add("java2");

		List<Integer> list2 = new ArrayList<Integer>();
		list2.add(10);
		list2.add(20);

		ArrayList<Boolean> list3 = new ArrayList<Boolean>();
		list3.add(true);
		list3.add(false);
		
		for(int i = 0; i<list1.size(); i++) {
			System.out.println("String " + (i+1) + "번째: " + list1.get(i));
			System.out.println("Integer " + (i+1) + "번째: " + list2.get(i));
			System.out.println("Boolean " + (i+1) + "번째: " + list3.get(i));
		}
		
		// 향상된 for문
		// for문과 구조가 다름: Collection이나 배열등의 자료구조 내부에 Element를 한건씩 빼주어서, 가독성을 높인 구조
		// for (요소 : 자료구조) { 알아서 자료구조의 크기만큼 반복을 하며 : 기준 왼쪽 요소에 아이템을 하나씩 빼면서 반복함.
		
		 //}
		for (int i = 0; i<=list1.size(); i++) {
			System.out.println(list1.get(i));
		}
		
		for(String str:list1) {
			System.out.println(str);
		}

	}
}
