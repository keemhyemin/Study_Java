package pack03.Board;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

public class BoardDAO {
	Connection conn;
	PreparedStatement ps;
	ResultSet rs;

	Scanner sc = new Scanner(System.in);

	public int inputint() { // 메뉴 선택
		while (true) {
			try {
				int rtnInt = Integer.parseInt(sc.nextLine());
				return rtnInt;
			} catch (Exception e) {
				System.out.println("숫자만 입력해주세요.");
			}
		}
	}

	public Connection getConn() { // DB 연결
		String url = ("jdbc:oracle:thin:@211.223.59.99:1521:xe");
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(url, "hanul", "0000");
		} catch (Exception e) {
			System.out.println("알 수 없는 오류 발생! 개발자에게 문의하세요.");
			e.printStackTrace();
		}
		return conn;
	}

	public void dbClose() { // DB 닫기
		try {
			if (rs != null) {
				rs.close();
			}
			if (ps != null) {
				ps.close();
			}
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public boolean isSignIn(BoardDTO dto) { // 로그인
		try {
			conn = getConn();
			System.out.println("========== 로그인 ==========");
			ps = conn.prepareStatement("SELECT MEMBER_NAME FROM MEMBER WHERE MEMBER_ID = ? AND MEMBER_PW = ?");
			System.out.print("ID: ");
			ps.setString(1, sc.nextLine());
			System.out.print("PW: ");
			ps.setString(2, sc.nextLine());
			rs = ps.executeQuery();
			if (rs.next()) {
				System.out.println(rs.getString("MEMBER_NAME") + "님, " + "로그인에 성공하셨습니다. ");
				dto.setLoginState("로그인");
				return true;
			} else {
				System.out.println("로그인에 실패하셨습니다.");
			}
		} catch (Exception e) {
			System.out.println("로그인에 실패하셨습니다.");
		} finally {
			dbClose();
		}
		dto.setLoginState("로그아웃");
		return false;
	}

	public void signUp() { // 회원가입
		System.out.println("========== 회원가입 ==========");
		try {
			conn = getConn();
			ps = conn
					.prepareStatement("INSERT INTO MEMBER (MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_CALL, MEMBER_AGE) "
							+ "VALUES(?, ?, ?, ?, ?)");
			System.out.print("ID(20자 이내): ");
			ps.setString(1, sc.nextLine());
			System.out.print("PW(20자 이내): ");
			ps.setString(2, sc.nextLine());
			System.out.print("이름: ");
			ps.setString(3, sc.nextLine());
			System.out.print("전화번호: ");
			ps.setString(4, sc.nextLine());
			System.out.print("나이: ");
			ps.setInt(5, Integer.parseInt(sc.nextLine()));
			ps.executeUpdate();
			System.out.println("회원가입이 정상적으로 완료되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	public void updateMemInfo() { // 회원정보수정
		System.out.println("========== 회원정보수정 ==========");
		try {
			conn = getConn();
			ps = conn.prepareStatement("SELECT * FROM MEMBER");
			rs = ps.executeQuery();
			while (rs.next()) {
				System.out.print("ID: " + rs.getString("MEMBER_ID") + "\t");
				System.out.print("PW: " + rs.getString("MEMBER_PW") + "\t");
				System.out.print("이름: " + rs.getString("MEMBER_NAME") + "\t");
				System.out.print("전화번호: " + rs.getString("MEMBER_CALL") + "\t");
				System.out.println("나이: " + rs.getInt("MEMBER_AGE"));
			}
			ps = conn.prepareStatement(
					"UPDATE MEMBER SET MEMBER_ID = ?, MEMBER_PW = ?, MEMBER_NAME = ?, MEMBER_CALL = ?, MEMBER_AGE = ? WHERE MEMBER_ID = ?");
			System.out.println("정보를 수정할 회원의 아이디를 입력해주세요.");
			ps.setString(6, sc.nextLine());
			System.out.println("정보를 수정해주세요.");
			System.out.print("ID(20자 이내): ");
			ps.setString(1, sc.nextLine());
			System.out.print("PW(20자 이내): ");
			ps.setString(2, sc.nextLine());
			System.out.print("이름: ");
			ps.setString(3, sc.nextLine());
			System.out.print("전화번호: ");
			ps.setString(4, sc.nextLine());
			System.out.print("나이: ");
			ps.setInt(5, Integer.parseInt(sc.nextLine()));
			ps.executeUpdate();
			System.out.println("정보수정이 완료되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	public void deleteMember() { // 회원탈퇴
		try {
			conn = getConn();
			System.out.println("========== 회원탈퇴 ==========");
			ps = conn.prepareStatement("DELETE FROM MEMBER WHERE MEMBER_ID = ? AND MEMBER_PW = ?");
			System.out.println("탈퇴하시려는 계정의 ID와 PW를 입력해주세요.");
			System.out.print("ID: ");
			ps.setString(1, sc.nextLine());
			System.out.print("PW: ");
			ps.setString(2, sc.nextLine());
			ps.executeUpdate();
			System.out.println("회원 탈퇴가 정상적으로 완료되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}

	}

	// ============================ 게시판 ============================

	public void boardMenu() { // 게시판 메뉴
		System.out.println("========== MENU ==========");
		System.out.print("1. 게시글 조회 ");
		System.out.print("2. 게시글 추가 ");
		System.out.print("3. 게시글 수정 ");
		System.out.print("4. 게시글 삭제 ");
		System.out.println("0. 종료");
	}

	public void selectList() { // 게시글 조회
		try {
			conn = getConn();
			ps = conn.prepareStatement("SELECT * FROM BOARD2 WHERE TITLE = ?");
			System.out.println("조회하려는 게시글의 제목을 입력해주세요.");
			ps.setString(1, sc.nextLine());
			rs = ps.executeQuery();
			if (rs.next()) {
				System.out.print(rs.getInt("text_number") + ". ");
				System.out.print("제목: " + rs.getString("title") + "\t");
				System.out.print("내용: " + rs.getString("contents") + "\t");
				System.out.print("작성자(ID): " + rs.getString("member_id") + "\t");
				System.out.println("작성일: " + rs.getString("write_date"));
			} else {
				System.out.println("게시글을 찾을 수 없습니다.");
			}
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	public void insertBoard() { // 게시글 추가
		try {
			conn = getConn();
			ps = conn.prepareStatement(
					"INSERT INTO BOARD2 (TEXT_NUMBER, TITLE, CONTENTS, MEMBER_ID, WRITE_DATE) SELECT (MAX(TEXT_NUMBER))+1, ?, ?, ?, SYSDATE FROM BOARD2");
			System.out.println("각 항목을 차례대로 입력해주세요.");
			System.out.print("제목: ");
			ps.setString(1, sc.nextLine());
			System.out.print("내용: ");
			ps.setString(2, sc.nextLine());
			System.out.print("작성자(ID): ");
			ps.setString(3, sc.nextLine());
			ps.executeUpdate();
			System.out.println("게시글이 정상적으로 등록되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	public void updateBoard() { // 게시글 수정
		try {
			conn = getConn();
			ps = conn.prepareStatement("SELECT * FROM BOARD2 ORDER BY 1");
			rs = ps.executeQuery();
			while (rs.next()) {
				System.out.print(rs.getInt("text_number") + ". ");
				System.out.print("제목: " + rs.getString("title") + "\t");
				System.out.print("내용: " + rs.getString("contents") + "\t");
				System.out.print("작성자(ID): " + rs.getString("member_id") + "\t");
				System.out.println("작성일: " + rs.getString("write_date"));
			}
			ps = conn
					.prepareStatement("UPDATE BOARD2 SET TITLE = ?, CONTENTS = ?, MEMBER_ID = ? WHERE TEXT_NUMBER = ?");
			System.out.println("수정하려는 게시글의 번호를 입력해주세요.");
			ps.setInt(4, Integer.parseInt(sc.nextLine()));
			System.out.println("수정할 항목을 차례대로 입력해주세요.");
			System.out.print("제목: ");
			ps.setString(1, sc.nextLine());
			System.out.print("내용: ");
			ps.setString(2, sc.nextLine());
			System.out.print("작성자(ID): ");
			ps.setString(3, sc.nextLine());
			ps.executeUpdate();
			System.out.println("게시글 수정이 정상적으로 완료되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	public void deleteBoard() { // 게시글 삭제
		try {
			conn = getConn();
			ps = conn.prepareStatement("SELECT * FROM BOARD2 ORDER BY 1");
			rs = ps.executeQuery();
			while (rs.next()) {
				System.out.print(rs.getInt("text_number") + ". ");
				System.out.print("제목: " + rs.getString("title") + "\t");
				System.out.print("내용: " + rs.getString("contents") + "\t");
				System.out.print("작성자(ID): " + rs.getString("member_id") + "\t");
				System.out.println("작성일: " + rs.getString("write_date"));
			}
			conn = getConn();
			ps = conn.prepareStatement("DELETE FROM BOARD2 WHERE TEXT_NUMBER = ?");
			System.out.println("삭제하려는 게시글의 번호를 입력해주세요.");
			ps.setInt(1, Integer.parseInt(sc.nextLine()));
			ps.executeUpdate();
			System.out.println("게시글 삭제가 정상적으로 완료되었습니다.");
		} catch (SQLException e) {
			System.out.println("오류: " + e.getMessage());
		} finally {
			dbClose();
		}
	}

	// ==========================================================================================================================================
	
	public void weather() {
    	String[][] tempCategory = { 
				{"T1H" , "기온" },
				{"RN1" , "1시간 내 강수량" },
				{"REH" , "습도" },
				{"PTY" , "강수형태" },
				{"VEC" , "풍향" },
				{"WSD" , "풍속" }
			};
			
			String url = "http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst?";
			String doc = null;
			String cty; // category
			// T1H(기온 ℃), RN1(1시간 강수량 mm), REH(습도 %), PTY(강수형태), VEC(풍향 deg), WSD(풍속 m/s)
			// 강수형태 수치에 대해서 -> 의미없음(0), 비(1), 비/눈(2), 눈(3), 소나기(4), 빗방울(5), 빗방울/눈날림(6),
			// 눈날림(7)

			Date date = new Date();
			SimpleDateFormat sdformat = new SimpleDateFormat("yyyyMMdd");
			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
			String today = sdformat.format(cal.getTime()); //날짜
			
			cal.add(Calendar.HOUR, -1); //현 시간부터 1시간 전
			SimpleDateFormat sdtime = new SimpleDateFormat("HH" + "00");
			String hour = sdtime.format(cal.getTime());
			
			SimpleDateFormat sddate = new SimpleDateFormat("yyyy-MM-dd"); //날짜 형식 바꾸기
			cal.setTime(date);
			String formatdate  = sddate.format(cal.getTime());
			
			cal.add(Calendar.HOUR, -1);
			SimpleDateFormat sdhour = new SimpleDateFormat("HH시"); //시간 형식 바꾸기
			String formathour = sdhour.format(cal.getTime());
			
			
			
			
			try {
				doc = Jsoup.connect(url).data("pageNo", "1").data("numOfRows", "10").data("dataType", "Json")
						.data("base_date", today).data("base_time", hour).data("nx", "58").data("ny", "74")
						.data("serviceKey",
								"kmc0ZV1P4EDjawY1Lf6lvCWeZXhgexI8O3A59ZNccISKWGOaO4IIUn+TAO8dYHAhjcPOkkGwsioB7rC1UgPOCQ==")
						.timeout(1000 * 40).userAgent("chrome").ignoreContentType(true).execute().body();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			JSONParser parser = new JSONParser(); // 문자열 -> JsonObject 형태로 바꿔줌
			try {
				JSONObject jsonObj = (JSONObject) parser.parse(doc);
				System.out.println("파싱성공");
				jsonObj = (JSONObject) jsonObj.get("response");
				jsonObj = (JSONObject) jsonObj.get("body");
				jsonObj = (JSONObject) jsonObj.get("items");
				JSONArray array = (JSONArray) jsonObj.get("item");
				System.out.println("array담기 성공(JsonArray)");
				System.out.println("날짜:" + formatdate + " | " + "예보시간:" + formathour + " | 위치:광주광역시");
				System.out.println("========================================");
				for (int i = 0; i < array.size(); i++) {
					JSONObject tempObj = (JSONObject) array.get(i);
				//	System.out.println("카테고리 obj"+tempObj.get("category"));
					for(int j = 0 ; j< tempCategory.length ; j ++) {
					//	System.out.println("배열"+tempCategory[j][0]);
						if (tempObj.get("category").equals(tempCategory[j][0])) {
							System.out
									.println(tempCategory[j][1] + ": " + tempObj.get("obsrValue"));


						}
					}

				}
			} catch (Exception e) {
				// String json이 key와 value를 가진 데이터가 아닌 그냥 일반 문자열이라면 오류가 발생.
				e.printStackTrace();
			}
			
			System.out.println(doc);
    }

	public void exit(BoardDTO dto) { // 로그아웃
		System.out.println("프로그램이 종료되었습니다.");
		dto.setLoginState("로그아웃");
	}
}